name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Deploy usando PowerShell
        run: |
          $sshCommand = "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222"
          $scpCommand = "scp -r -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -P 2222"

          # Remover  o diretório na VM antes de copiar
          Invoke-Expression "$sshCommand ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} 'rm -rf /home/john/redes && mkdir -p /home/john/redes'"

          # Transferir arquivos usando SCP
          Invoke-Expression "$scpCommand  ./ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/john/redes"
      
      - name: Build Backend Docker Image on Frontend VM
        run: |
              # Comandos a serem executados na VM do Frontend
              $commands = @"
              echo "Construindo a imagem Docker do frontend..."
              cd /home/john/redes/frontend
              docker build -t frontend_image:latest .
              echo "Construindo a imagem Docker do backend..."
              cd /home/john/redes/backend
              docker build -t backend_image:latest .
              echo "Construindo a imagem Docker do db..."
              docker build -t backend_db -f Dockerfile.db . 
              echo "Salvando as imagens como .tar..."
              docker save backend_image:latest | gzip > backend_image.tar.gz
              docker save backend_db:latest | gzip > backend_db.tar.gz
              docker save frontend_image:latest | gzip > frontend_image.tar.gz
              echo "Parando o container existente, se estiver em execução..."
                docker stop frontend_container || true
                echo "Removendo o container existente..."
                docker rm frontend_container || true  
                gunzip -c frontend_image.tar.gz | docker load
                echo "Executando o container..."
                docker run -d --name frontend_container -p 3000:3000 frontend_image:latest  
              echo "Transferindo imagens para o backend..."
              scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -P 22 backend_image.tar.gz backend_db.tar.gz redes@192.168.56.102:/home/redes/backend/
              
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 22 redes@192.168.56.102 << 'BACKEND_EOF'
                echo "Parando o container existente, se estiver em execução..."
                docker stop backend_container || true
                docker stop db_container || true
                echo "Removendo o container existente..."
                docker rm backend_container || true  
                docker rm db_container || true  
                echo "Criando diretório no backend..."
                mkdir -p /home/redes/backend  
                echo "Carregando e subindo o backend..."
                cd /home/redes/backend
                gunzip -c backend_image.tar.gz | docker load
                gunzip -c backend_db.tar.gz | docker load
                echo "Executando o container..."
                docker run -d --name backend_container -p 5000:5000 backend_image:latest
                docker run -d --name db_container -p 5432:5432 -v postgres_data:/var/lib/postgresql/data backend_db:latest 
              BACKEND_EOF
              "@
        
              # Remover caracteres de retorno de carro
              $commands = $commands -replace "`r", ""
              # Executando os comandos na VM do Frontend
              $sshCommand = "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p 2222 redes@127.0.0.1"
              Invoke-Expression "$sshCommand '$commands'"
